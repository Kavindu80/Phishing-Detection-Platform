name: Automated Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      
      - name: Install dependencies
        run: |
          # Install frontend dependencies
          cd frontend
          npm ci
          cd ..
          
          # Install backend dependencies
          cd backend
          pip install -r requirements.txt
          cd ..
      
      - name: Run tests
        run: |
          # Frontend tests
          cd frontend
          npm run test -- --watchAll=false --coverage
          cd ..
          
          # Backend tests
          cd backend
          python -m pytest tests/ -v --cov=src --cov-report=xml
          cd ..
      
      - name: Build application
        run: |
          # Build frontend
          cd frontend
          npm run build
          cd ..
          
          # Build backend (if needed)
          cd backend
          # Add any backend build steps here
          cd ..
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get version from tag or input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate changelog
          bash scripts/update-changelog.sh
          
          # Extract changelog content
          if [ -f "CHANGELOG.md" ]; then
            # Get the latest release section
            CHANGELOG_CONTENT=$(awk '/^## \['$VERSION'\]/{p=1;next}/^## \[/{p=0}p' CHANGELOG.md | sed '1d')
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.changelog.outputs.version }}
          release_name: Release ${{ steps.changelog.outputs.version }}
          body: |
            ## What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ```bash
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git
            cd phishing-detector
            
            # Checkout the release
            git checkout ${{ steps.changelog.outputs.version }}
            
            # Install dependencies
            cd frontend && npm install
            cd ../backend && pip install -r requirements.txt
            
            # Run the application
            docker-compose up
            ```
            
            ## Migration Guide
            
            If you're upgrading from a previous version, please check the migration guide in the documentation.
            
            ## Support
            
            For support, please open an issue on GitHub or contact the development team.
          draft: false
          prerelease: false
      
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./frontend/dist
          asset_name: frontend-${{ steps.changelog.outputs.version }}.zip
          asset_content_type: application/zip
      
      - name: Create Release Notes
        run: |
          # Create detailed release notes
          bash scripts/release-manager.sh notes ${{ steps.changelog.outputs.version }}
          
          # Upload release notes as asset
          if [ -f "RELEASE_NOTES_${{ steps.changelog.outputs.version }}.md" ]; then
            # This would be uploaded in a separate step if needed
            echo "Release notes generated: RELEASE_NOTES_${{ steps.changelog.outputs.version }}.md"
          fi
      
      - name: Notify Team
        if: success()
        run: |
          echo "Release ${{ steps.changelog.outputs.version }} has been successfully created!"
          echo "Release URL: ${{ steps.create_release.outputs.html_url }}"
          
          # You can add Slack/Discord notifications here
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"Release ${{ steps.changelog.outputs.version }} has been published!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Update Documentation
        if: success()
        run: |
          # Update version in documentation
          if [ -f "README.md" ]; then
            sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-${{ steps.changelog.outputs.version }}/g" README.md
          fi
          
          # Commit documentation updates
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "docs: update version to ${{ steps.changelog.outputs.version }}" || true
          git push origin main
      
      - name: Cleanup
        if: always()
        run: |
          # Cleanup temporary files
          rm -f RELEASE_NOTES_*.md
          rm -rf frontend/dist 