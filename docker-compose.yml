version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:4.4
    container_name: phishguard-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: phishguard
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/init_db.py:/docker-entrypoint-initdb.d/init_db.py:ro
    networks:
      - phishguard-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: phishguard-backend
    restart: unless-stopped
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - MONGO_URI=mongodb://admin:password123@mongodb:27017/phishguard?authSource=admin
      - SECRET_KEY=your-production-secret-key
      - JWT_SECRET_KEY=your-production-jwt-secret
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./backend/ML:/app/ML:ro
    networks:
      - phishguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: phishguard-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - phishguard-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: phishguard-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - phishguard-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: phishguard-nginx
    restart: unless-stopped
    ports:
      - "443:443"
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - phishguard-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  phishguard-network:
    driver: bridge 